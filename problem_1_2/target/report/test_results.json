{"projectName":"problem_1_2","totalTests":2,"passed":2,"failed":0,"skipped":0,"coveredLines":28,"missedLines":0,"coveragePercentage":100.0,"moduleStatus":[{"name":"problem_1_2","totalTests":2,"passed":2,"failed":0,"skipped":0,"tests":[{"name":"processFuelRecordsTest#0","status":"PASSED"},{"name":"processFuelRecordsTest#1","status":"PASSED"}]}],"moduleCoverage":[{"name":"problem_1_2","coveredLines":28,"missedLines":0,"coveragePercentage":100.0,"sourceFiles":[{"name":"main.bal","coveredLines":[4,6,7,9,10,11,13,14,15,17,20,21,22,23,24,26,30,31,32,33,36,37,38,39,40],"missedLines":[],"coveragePercentage":100.0,"sourceCode":"import ballerina/io;\r\n\r\nfunction processFuelRecords(string inputFilePath, string outputFilePath) returns error? {\r\n    InputFuelRecord[] input \u003d check io:fileReadCsv(inputFilePath);\r\n    \r\n    table\u003cEmployee\u003e key(employee_id) employee_table \u003d table [];\r\n    table\u003cOdometerReading\u003e key(employee_id) odometer_readings \u003d table [];\r\n\r\n    foreach var employee in input {\r\n        boolean isRecordedBefore \u003d employee_table.hasKey(employee.employee_id);\r\n        boolean isOdometerRecordedBefore \u003d odometer_readings.hasKey(employee.employee_id);\r\n\r\n        if (isOdometerRecordedBefore) {\r\n            OdometerReading reading \u003d odometer_readings.get(employee.employee_id);\r\n            reading.readings.push(employee.odometer_reading);\r\n        } else {\r\n            odometer_readings.add({employee_id: employee.employee_id, readings: [employee.odometer_reading]});\r\n        }\r\n\r\n        if isRecordedBefore {\r\n            Employee recordedEmployee \u003d employee_table.get(employee.employee_id);\r\n            recordedEmployee.gas_fill_up_count +\u003d 1;\r\n            recordedEmployee.total_gallons +\u003d employee.gallons;\r\n            recordedEmployee.total_fuel_cost +\u003d employee.gallons * employee.gas_price;\r\n        } else {\r\n            employee_table.add({employee_id: employee.employee_id, gas_fill_up_count: 1, total_fuel_cost: employee.gallons * employee.gas_price, total_gallons: employee.gallons});\r\n        }\r\n    }\r\n\r\n    foreach var k in odometer_readings.keys() {\r\n        Employee employee \u003d employee_table.get(k);\r\n        OdometerReading reading \u003d odometer_readings.get(k);\r\n        employee.total_miles_accrued \u003d reading.readings.pop() - reading.readings[0];\r\n    }\r\n\r\n    Employee[] response \u003d from Employee emp in employee_table\r\n        order by emp.employee_id ascending\r\n        select emp;\r\n    check io:fileWriteCsv(outputFilePath, response);\r\n}\r\n"},{"name":"types.bal","coveredLines":[7,15,20],"missedLines":[],"coveragePercentage":100.0,"sourceCode":"\r\npublic type InputFuelRecord record {|\r\n    int employee_id;\r\n    int odometer_reading;\r\n    decimal gallons;\r\n    decimal gas_price;\r\n|};\r\n\r\npublic type Employee record {|\r\n    readonly int employee_id;\r\n    int gas_fill_up_count;\r\n    decimal total_fuel_cost;\r\n    decimal total_gallons;\r\n    int total_miles_accrued?;\r\n|};\r\n\r\npublic type OdometerReading record {|\r\n    readonly int employee_id;\r\n    int[] readings;\r\n|};\r\n"}]}]}