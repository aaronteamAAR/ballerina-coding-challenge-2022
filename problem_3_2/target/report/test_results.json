{"projectName":"problem_3_2","totalTests":2,"passed":2,"failed":0,"skipped":0,"coveredLines":11,"missedLines":0,"coveragePercentage":100.0,"moduleStatus":[{"name":"problem_3_2","totalTests":2,"passed":2,"failed":0,"skipped":0,"tests":[{"name":"testGetTopXBillionaires#\u0027case1\u0027","status":"PASSED"},{"name":"testGetTopXBillionaires#\u0027case2\u0027","status":"PASSED"}]}],"moduleCoverage":[{"name":"problem_3_2","coveredLines":11,"missedLines":0,"coveragePercentage":100.0,"sourceFiles":[{"name":"main.bal","coveredLines":[12,13,15,16,18,19,21,22,25,27,28],"missedLines":[],"coveragePercentage":100.0,"sourceCode":"import ims/billionairehub;\n\n# Client ID and Client Secret to connect to the billionaire API\nconfigurable string clientId \u003d ?;\nconfigurable string clientSecret \u003d ?;\n\ntype Billionaire record {\n    readonly string name;\n    float netWorth;\n    string country;\n    string industry;\n};\npublic function getTopXBillionaires(string[] countries, int x) returns string[]|error {\n    \n    billionairehub:Client cl \u003d check new ({auth: {clientId, clientSecret}});\n    Billionaire[] billionairesArray \u003d [];\n\n    foreach string country in countries {\n        billionairehub:Billionaire[] res \u003d check cl-\u003egetBillionaires(country);\n        \n        Billionaire[] oldBillionaires \u003d check res.cloneWithType();\n        billionairesArray.push(...oldBillionaires);\n    }\n\n    table\u003cBillionaire\u003e key(name) billionaires \u003d table key(name) from var billionaire in billionairesArray select billionaire;\n\n    return from var {name, netWorth} in billionaires order by netWorth descending limit x select name;\n}\n"}]}]}