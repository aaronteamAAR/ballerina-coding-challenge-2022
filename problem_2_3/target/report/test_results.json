{"projectName":"problem_2_3","totalTests":1,"passed":1,"failed":0,"skipped":0,"coveredLines":17,"missedLines":0,"coveragePercentage":100.0,"moduleStatus":[{"name":"problem_2_3","totalTests":1,"passed":1,"failed":0,"skipped":0,"tests":[{"name":"addHighPaymentTest#\u0027Test1\u0027","status":"PASSED"}]}],"moduleCoverage":[{"name":"problem_2_3","coveredLines":17,"missedLines":0,"coveragePercentage":100.0,"sourceFiles":[{"name":"main.bal","coveredLines":[9,12,13,14,15,18,19,22,24,28,29,31,32,33,34,36,37],"missedLines":[],"coveragePercentage":100.0,"sourceCode":"import ballerina/sql;\nimport ballerinax/java.jdbc;\n\ntype HighPayment record {\n    string name;\n    string department;\n    decimal amount;\n    string reason;\n};\n\nfunction getHighPaymentDetails(string dbFilePath, decimal  amount) returns HighPayment[]|error {\n    jdbc:Client|sql:Error dbClient \u003d new (\n        url \u003d \"jdbc:h2:\" + dbFilePath,\n        user \u003d \"root\",\n        password \u003d \"root\"\n    );\n\n    if dbClient is sql:Error {\n        panic error(\"Incorrect DB credentials.\");\n    }\n\n    HighPayment[] highPayments \u003d [];\n\n    stream\u003cHighPayment,sql:Error?\u003e payments \u003d dbClient-\u003equery(`\n        SELECT Employee.name, Employee.department, Payment.amount, Payment.reason\n        FROM Payment\n        INNER JOIN Employee ON Payment.employee_id \u003d Employee.employee_id\n        WHERE Payment.amount \u003e ${amount};`\n    , HighPayment);\n\n    check from HighPayment highPayment in payments\n        do {\n            highPayments.push(highPayment);\n        };\n\n    check payments.close();\n    return highPayments;\n}\n"}]}]}