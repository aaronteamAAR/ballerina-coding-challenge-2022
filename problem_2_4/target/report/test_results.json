{"projectName":"problem_2_4","totalTests":2,"passed":2,"failed":0,"skipped":0,"coveredLines":19,"missedLines":0,"coveragePercentage":100.0,"moduleStatus":[{"name":"problem_2_4","totalTests":2,"passed":2,"failed":0,"skipped":0,"tests":[{"name":"getHighValuesTest#\u0027Test1\u0027","status":"PASSED"},{"name":"getHighValuesTest#\u0027Test2\u0027","status":"PASSED"}]}],"moduleCoverage":[{"name":"problem_2_4","coveredLines":19,"missedLines":0,"coveragePercentage":100.0,"sourceFiles":[{"name":"main.bal","coveredLines":[8,10,11,12,13,14,17,18,21,24,25,27,29,30,31,32,34,36,38],"missedLines":[],"coveragePercentage":100.0,"sourceCode":"import ballerinax/java.jdbc;\nimport ballerina/sql;\n\ntype HighPayment record {|\n    readonly int payment_id;\n    decimal amount;\n    string employee_name;\n|};\n\nfunction getHighPaymentEmployees(string dbFilePath, decimal thresholdAmount) returns string[]|error {\n    jdbc:Client|sql:Error dbClient \u003d new (\n        url \u003d \"jdbc:h2:\" + dbFilePath,\n        user \u003d \"root\",\n        password \u003d \"root\"\n    );\n\n    if dbClient is sql:Error {\n        panic error(\"Incorrect DB credentials.\");\n    }\n\n    stream\u003cHighPayment,sql:Error?\u003e paymentsStream \u003d dbClient-\u003equery(`\n        SELECT Employee.name as employee_name, Payment.amount, Payment.payment_id\n        FROM Payment\n        INNER JOIN Employee ON Payment.employee_id \u003d Employee.employee_id`\n    , HighPayment);\n\n    table\u003cHighPayment\u003e key(payment_id) employeeTable \u003d table [];\n\n    check from HighPayment payment in paymentsStream\n        do {\n            employeeTable.add(payment);\n        };\n    \n    check paymentsStream.close();\n\n    var names \u003d table key(employee_name) from var {employee_name, amount} in employeeTable where amount \u003e thresholdAmount order by employee_name ascending select {employee_name};\n\n    return from var {employee_name} in names select employee_name;\n}\n"}]}]}