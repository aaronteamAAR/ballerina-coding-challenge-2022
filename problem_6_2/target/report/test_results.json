{"projectName":"problem_6_2","totalTests":2,"passed":2,"failed":0,"skipped":0,"coveredLines":45,"missedLines":15,"coveragePercentage":75.0,"moduleStatus":[{"name":"problem_6_2","totalTests":2,"passed":2,"failed":0,"skipped":0,"tests":[{"name":"testNotificationOnDriverArrivalSample","status":"PASSED"},{"name":"testUpdateOfTable","status":"PASSED"}]}],"moduleCoverage":[{"name":"problem_6_2","coveredLines":45,"missedLines":15,"coveragePercentage":75.0,"sourceFiles":[{"name":"driver_service.bal","coveredLines":[9,10,11,12,13,14,15,19,20,21,24,25],"missedLines":[16],"coveragePercentage":92.31,"sourceCode":"import ballerina/websocket;\r\nimport ballerina/regex;\r\nimport ballerina/log;\r\nimport ballerina/time;\r\n\r\nservice class driverService {\r\n  *websocket:Service;\r\n\r\n  remote function onMessage(string buildingIdAndName) returns error? {\r\n    string[] splitString \u003d regex:split(regex:replace(buildingIdAndName, \":\", \" \"), \" \");\r\n    string buildingId \u003d splitString[0];\r\n    string name \u003d splitString[1];\r\n    string time \u003d time:utcToString(time:utcNow());\r\n    websocket:Caller[]? riders \u003d riderRequestedLocationMap[buildingId];\r\n    if riders is () {\r\n      return error(\"Unusual error.\");\r\n    }\r\n\r\n    log:printInfo(\"Message recieved by a driver\", info \u003d {name, buildingId, time});\r\n    foreach var rider in riders {\r\n      check rider-\u003ewriteTextMessage(name);\r\n    }\r\n\r\n    dailyDrivers.add({driver: name, buildingId, time});\r\n  }\r\n}"},{"name":"types.bal","coveredLines":[5,11],"missedLines":[],"coveragePercentage":100.0,"sourceCode":"type RiderDetails record {|\r\n    string time;\r\n    string rider;\r\n    string buildingId;\r\n|};\r\n\r\ntype DriverDetails record {|\r\n    string time;\r\n    string driver;\r\n    string buildingId;\r\n|};\r\n"},{"name":"rider_service.bal","coveredLines":[13,14,16,17,18,19,21,22,23,24,31,32,33,35,36,38,41,44,46,47],"missedLines":[25,26,28,39,49,50,51,52,53,54,55,56,58,61],"coveragePercentage":58.82,"sourceCode":"import ballerina/time;\r\nimport ballerina/log;\r\nimport ballerina/websocket;\r\n\r\nmap\u003cwebsocket:Caller[]\u003e riderRequestedLocationMap \u003d {\"Building-1\": [], \"Building-2\": [], \"Building-3\": [], \"Building-4\": [], \"Building-5\": []};\r\n\r\nservice class riderService {\r\n    *websocket:Service;\r\n    private string name;\r\n    private string time;\r\n\r\n    public function init(string name) {\r\n        if riderRequestedLocationMap.hasKey(name) {\r\n            panic error websocket:UpgradeError(string `User ${name} is already registered`);\r\n        }\r\n        self.name \u003d name;\r\n        self.time \u003d \"\";\r\n        log:printInfo(\"New Rider Instance was made\", name \u003d \"name\");\r\n    }\r\n\r\n    remote function onOpen(websocket:Caller caller) returns websocket:Error? {\r\n        foreach var key in riderRequestedLocationMap {\r\n            int i \u003d 0;\r\n            foreach var registeredCaller in key {\r\n                if registeredCaller.getConnectionId() \u003d\u003d caller.getConnectionId() {\r\n                    return;\r\n                }\r\n                i +\u003d 1;\r\n            }\r\n        }\r\n        self.time \u003d time:utcToString(time:utcNow());\r\n        log:printInfo(\"A connection was made by rider\", info \u003d {name: self.name, time: self.time});\r\n    }\r\n\r\n    remote function onMessage(websocket:Caller caller, string buildingId) returns websocket:Error? {        \r\n        websocket:Caller[]? building \u003d riderRequestedLocationMap[buildingId];\r\n\r\n        if building is () {\r\n            riderRequestedLocationMap[buildingId] \u003d [caller];\r\n        } else {\r\n            building.push(caller);\r\n        }\r\n\r\n        log:printInfo(\"A Message recieved by rider\", info \u003d { name: self.name, buildingId: buildingId });\r\n\r\n        dailyRiders.add({buildingId, rider: self.name, time: self.time});\r\n    }\r\n\r\n    remote function onClose(websocket:Caller caller) returns websocket:Error? {\r\n        log:printInfo(\"A Connection closed by rider\", info \u003d { name: self.name });\r\n        foreach var key in riderRequestedLocationMap {\r\n            int i \u003d 0;\r\n            foreach var registeredCaller in key {\r\n                if registeredCaller.getConnectionId() \u003d\u003d caller.getConnectionId() {\r\n                    _ \u003d key.remove(i);\r\n                    return;\r\n                }\r\n                i +\u003d 1;\r\n            }\r\n        }\r\n    }\r\n}\r\n"},{"name":"main.bal","coveredLines":[7,9,10,11,12,13,15,17,18,19,20],"missedLines":[],"coveragePercentage":100.0,"sourceCode":"import ballerina/io;\nimport ballerina/websocket;\ntable\u003cRiderDetails\u003e dailyRiders \u003d table [];\ntable\u003cDriverDetails\u003e dailyDrivers \u003d table [];\n\nlistener websocket:Listener wsListener \u003d new(9092);\nservice /rider on wsListener {\n\n   resource function get . (string name) returns websocket:Service {\n        io:print(\"Here\");\n       return new riderService(name);\n   }   \n}\n\nservice /driver on wsListener {\n\n    resource function get . () returns websocket:Service|websocket:Error {\n        return new driverService();\n   }\n}\n"}]}]}