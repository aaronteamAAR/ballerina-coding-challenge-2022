{"projectName":"problem_3_1","totalTests":4,"passed":2,"failed":2,"skipped":0,"coveredLines":25,"missedLines":0,"coveragePercentage":100.0,"moduleStatus":[{"name":"problem_3_1","totalTests":4,"passed":2,"failed":2,"skipped":0,"tests":[{"name":"testConversion#\u0027case1\u0027","status":"FAILURE","failureMessage":"Assertion Failed!\n\tat ballerina.test.0:createBallerinaError(assert.bal:43)\n\t   ballerina.test.0:assertTrue(assert.bal:64)\n\t   balhack.problem_3_1$test.1.tests.tests:testConversion(tests/tests.bal:10)"},{"name":"testConversion#\u0027case2\u0027","status":"FAILURE","failureMessage":"Assertion Failed!\n\tat ballerina.test.0:createBallerinaError(assert.bal:43)\n\t   ballerina.test.0:assertTrue(assert.bal:64)\n\t   balhack.problem_3_1$test.1.tests.tests:testConversion(tests/tests.bal:10)"},{"name":"testInvalidInput#0","status":"PASSED"},{"name":"testInvalidInput#1","status":"PASSED"}]},{"name":"problem_3_1.backend","totalTests":0,"passed":0,"failed":0,"skipped":0,"tests":[]}],"moduleCoverage":[{"name":"problem_3_1","coveredLines":6,"missedLines":0,"coveragePercentage":100.0,"sourceFiles":[{"name":"main.bal","coveredLines":[7,19,20,21,22,23],"missedLines":[],"coveragePercentage":100.0,"sourceCode":"import ballerina/http;\nimport problem_3_1.backend as _;\n\ntype ApiResponse record {\n    string base;\n    map\u003cdecimal\u003e rates;\n};\n\n# The exchange rate API base URL\nconfigurable string apiUrl \u003d \"http://localhost:8080\";\n# Convert provided salary to local currency\n#\n# + salary - Salary in source currency\n# + sourceCurrency - Source currency\n# + localCurrency - Employee\u0027s local currency\n# + return - Salary in local currency or error\npublic function convertSalary(decimal salary, string sourceCurrency, string localCurrency) returns decimal|error {\n    \n    http:Client currencyApiClient \u003d check new(apiUrl);\n    ApiResponse response \u003d check currencyApiClient-\u003eget(\"/rates/\" + sourceCurrency);\n    decimal rate \u003d response.rates.get(localCurrency);\n    return (salary * rate).round(5);\n}\n"}]},{"name":"problem_3_1.backend","coveredLines":19,"missedLines":0,"coveragePercentage":100.0,"sourceFiles":[{"name":"backend.bal","coveredLines":[7,9,14,15,16,18,19,20,21,24,26,29,30,31,32,33,36,37,38],"missedLines":[],"coveragePercentage":100.0,"sourceCode":"import ballerina/io;\nimport ballerina/http;\n\ntype Rates record {|\n    string base;\n    map\u003cdecimal\u003e rates;\n|};\n\nservice / on new http:Listener(8080) {\n\n    private final Rates rates;\n\n    function init() returns error? {\n        json ratesJson \u003d check io:fileReadJson(\"tests/resources/rates.json\");\n        self.rates \u003d check ratesJson.fromJsonWithType(Rates);\n    }\n\n    resource function get rates/[string baseCurrency]() returns Rates|error {\n        decimal? rate \u003d self.rates.rates[baseCurrency];\n        if rate is () {\n            return error(\"Invalid base currency\");\n        }\n\n        Rates response \u003d {\n            base: baseCurrency,\n            rates: {}\n        };\n\n        foreach [string, decimal] entry in self.rates.rates.entries() {\n            string currency \u003d entry[0];\n            decimal rateInEuro \u003d entry[1];\n            decimal rateInBaseCurrency \u003d rateInEuro / rate;\n            response.rates[currency] \u003d rateInBaseCurrency;\n        }\n\n        return response;\n    }\n}\n"}]}]}